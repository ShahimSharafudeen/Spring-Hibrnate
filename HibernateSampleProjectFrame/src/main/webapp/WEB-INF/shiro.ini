[main]
authc = org.apache.shiro.web.filter.authc.FormAuthenticationFilter
authc.loginUrl = /login
authc.successUrl = /login/success
authc.usernameParam = name
authc.passwordParam = password
authc.failureKeyAttribute = shiroLoginFailure

# password matcher
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordMatcher.passwordService = $passwordService

# check below code for create encripted password from plane password using default password service
#
# DefaultPasswordService a = new DefaultPasswordService();
# password = a.encryptPassword(password);
#

ds = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
ds.serverName =localhost
ds.user = root
ds.password =root
ds.databaseName = hibernateeg
jdbcRealm.dataSource=$ds

jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = SELECT password FROM login WHERE name = ?
jdbcRealm.userRolesQuery = SELECT role_name FROM employee_roles WHERE name = ?
jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource=$ds
securityManager.realms = $jdbcRealm

#cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
#securityManager.cacheManager = $cacheManager
#jdbcRealm.authenticationCachingEnabled = true

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
/login = authc
/logout = logout
/login/** = authc, roles["ADMIN"]